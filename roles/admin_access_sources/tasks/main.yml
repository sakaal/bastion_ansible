---
# file: roles/admin_access_sources/tasks/main.yml

#
# Restricts administrative access based on connection source address.
#
# The firewall may have to be reconfigured while direct administrative access
# to the bastion host has been lost.  Therefore the bastion must independently
# poll the configuration repository and reconfigure itself when changes are
# detected.
#

- name: Determine the firewall default zone
  sudo: yes
  command: firewall-cmd --get-default-zone
  register: default_zone
  changed_when: False

#
# Manage administrative SSH port access only when
# targeting the default administrative firewall zone.
#
- name: Manage administrative SSH port access
  when: firewall_zone == default_zone.stdout.strip()
  sudo: yes
  command: sed -ne 's/^\s*Port\s\+\([0-9]\+\)/\1/p' /etc/ssh/sshd_config
  register: sshd_port
  changed_when: False

- name: Create a temporary file for firewall rules
  command: mktemp
  register: temp_file
  changed_when: False

#
# Record a systemd kernel module journal entry
# and a NETFILTER_PKT entry in the audit log.
#

- set_fact:
    temp_file: "{{ temp_file.stdout | mandatory }}"
    log_limit: "5/m"

- name: A firewall rule to reject and log SSH port 22 connection attempts
  when: not sshd_port|skipped
  shell: echo
         'rule port port="22" protocol="tcp"
         log prefix="REJECT " level="notice" limit value="{{ log_limit }}"
         audit limit value="{{ log_limit | mandatory }}"
         reject' >> {{ temp_file }}
  changed_when: False

- name: Generate firewall rules for the administrative SSH port
  when: (admin_access_sources|default(False)) and not sshd_port|skipped
  with_items: admin_access_sources
  shell: echo
         'rule family="ipv4" source address="{{ item }}"
         port port="{{ sshd_port.stdout.strip() | mandatory }}" protocol="tcp"
         accept' >> {{ temp_file }}
  changed_when: False

- name: Generate firewall rules for services
  when: (admin_access_sources|default(False)) and
        (firewall_services|default(False))
  with_nested:
  - admin_access_sources
  - firewall_services
  shell: command echo
         'rule family="ipv4" source address="{{ item[0] }}"
         service name="{{ item[1] }}" accept' >> {{ temp_file }}
  changed_when: False

- name: Read the firewall rules from the temporary file
  command: cat {{ temp_file }}
  register: firewall_rules
  changed_when: False

- name: Delete the temporary file
  file: name="{{ temp_file }}" state=absent
  changed_when: False

- set_fact:
    firewall_rules: "{{Â firewall_rules.stdout_lines }}"
  changed_when: False

- name: Check the currently active firewall rules
  sudo: yes
  command: firewall-cmd --permanent
           --zone={{ firewall_zone | mandatory }}
           --list-rich-rules
  register: firewall_result
  changed_when: False

- set_fact:
    missing_rules: "{{ firewall_rules | difference(firewall_result.stdout_lines) }}"
    unwanted_rules: "{{ firewall_result.stdout_lines | difference(firewall_rules) }}"
  changed_when: False

- name: Add authorized firewall rules
  with_items: missing_rules
  sudo: yes
  command: firewall-cmd --permanent
           --zone={{ firewall_zone | mandatory }}
           --add-rich-rule='{{ item }}'
  register: rules_added
  changed_when: True

- name: Remove unauthorized firewall rules
  with_items: unwanted_rules
  sudo: yes
  command: firewall-cmd --permanent
           --zone={{ firewall_zone | mandatory }}
           --remove-rich-rule='{{ item }}'
  register: rules_removed
  changed_when: True

- name: Check firewall rules for the administrative SSH port
  when: not sshd_port|skipped
  sudo: yes
  shell: firewall-cmd --permanent
         --zone={{ firewall_zone | mandatory }}
         --list-rich-rules | grep 'port="{{ sshd_port.stdout }}"'
  register: firewall_result
  changed_when: firewall_result.rc != 0 or firewall_result.stdout.strip() == ""
  failed_when: False

- name: Open the administrative SSH port when no stricter rules apply
  when: (not sshd_port|skipped) and (firewall_result|changed)
  sudo: yes
  command: firewall-cmd --permanent --zone={{ firewall_zone }}
           --add-port="{{ sshd_port.stdout.strip() }}/tcp"

- name: Restrict administrative SSH port access
  when: (not sshd_port|skipped) and (not firewall_result|changed)
  sudo: yes
  command: firewall-cmd --permanent --zone={{ firewall_zone }}
           --remove-port="{{ sshd_port.stdout.strip() }}/tcp"

- name: Reload the firewall configuration
  when: rules_added|changed or rules_removed|changed
  sudo: yes
  command: firewall-cmd --reload
  changed_when: True
